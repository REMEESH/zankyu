

                 Node js

-----------------------------------------------
1.Features =
 -highly scalable
 -open source
 -async progamming
 -faster
 -single threaded with event loop

2.Node js global objects
    - it can access anywhere from node app without exporting/importing
    - ex: console.log(), setTimeout()

3. Node js Modules system
   - each file node js app is considered as separate Module
   - To reuse modules we have to export and import
   - To import a module: use require('module name') method
   - To export a module: module.exports / exports
   - Build in Modules
       - fs : file system - handling file related events
       - http : generating http request
       - https : generating https request
       - events : generating event 
       - crypto : tool like encryption,Hashing etc
       - process : used to provide currently running process information
           - environmental variable : used to store run time values
    
4.Node js packages
    - used to help solving common problems
    - collection of node_modules and package.json
    - install package : npm i package-name
    - create package.json : npm configuration file for project
    - node_modules folder : used to hold copies installed packages
    - package-lock.json : to hold version of installed packages

5.Backend Concepts
   - Client-Server architecture : sending request and response between 2 application
   - API : 
   - RESTful API : http request with json data
   - CRUD : create, read, update, delete 
   - CORS : Cross Origin Resource Shairing

                    Express JS
             -----------------------

1. Framework for resolving Client Server app of Node js
2. create a server folder
3. create package.json file : use command- npm init -y
4. Update start command as "start": "node index.js" in scripts of package.json
5. Install packages 
     - Express : npm i express
     - cors : npm i cors
     - dotenv : npm i dotenv
6. create .env file to hold environmental variables
7. create .gitignore to add file to ignore while adding to git
8. create index.js file to define server
     - import dotenv
     - imort express 
     - import cors
     - create express server
     - use following in server
         - cors
         - parser for json
    - customise port to listen http request
    - run server app
9. create Routes folder in server to define routes 
    - create router.js file
      - import express
      - create router object of express to define path
      - using router object define path
      - to define logic to resolve http request, redirect it to its controller
10. create controller folder in server to define logic to solve API
    - create Controller.js file
      - create function to solve request 


Mongoose
---------
1. Nodejs library to communicate MondoDB
2. install Mongoose: npm install mongoose
3. create a new folder for defining db connection using mongoose
   - create a js file to fefimne connectivity
   - import mongoose
   - get connection 
   - connect mongodb with node using mongoose
   - import connection.js file in index.js file  
4. Schema: Schema maps to a MongoDB collection and defines the shape of the documents within this collection.
5. 



